#!/usr/bin/env bash

usage(){
    local me=$(basename $0)
    cat <<- EOF
	$me --cmd some_command --log log_file [flags|options]...
	
	    Options (followed by Arg):
	        --cmd
	        --log
	                what to run and where to log
	                uses placeholders _SEQ_ (overall count), _NARY_ (_SEQ_ modulus concurrent)
	                e.g. --log foo-_SEQ_.log
	        -a | --max-errors
	                stop after Arg errors (i.e. when Arg processes return non-zero)
	        -c | --config
	                Arg is config file to set options/env (bash)
	                default: $config
	        -p | --parallel
	                Arg is number of commands run at the same time
	        -m | --max-starts
	                Arg is number of commands run, then '$me' stops
	    Flags:
	        -h | --help
	                show this help, exit
	        -K | --no-kill
	                when exiting, do not kill running commands (def: kill)
	        -w | --wait
	                when exiting, wait for running commands to complete (cf --no-kill)
EOF
}

max_running=50
max_starts=0
max_errors=10
config=$HOME/.ennaryrc
seen_config=
cmd=
logfile=
post_wait=
post_kill=1
dieing=

log() { echo $(date '+%Y-%m-%d %T') "$@"; }
die() { log "$@" >&2; exit 2; }

ensure_config() {
    [[ -n $seen_config ]] && return
    seen_config=1
    test -f $config && source $config
}

my_ps() { ps -o pid= -p ${pids// /,} | tr '\n' ' '; }
tidy_pids() {
    local ps_pids=$(my_ps) pid=
    for pid in $pids; do
        [[ " $ps_pids " == *" $pid "* ]] && continue
        pids=${pids% $pid}; pids=${pids#$pid }; pids=${pids/ $pid / }
    done
}

tidy_up() {
    local pls_die=
    [[ -z $1 ]] && pls_die=1
    if [[ -z $dieing ]]; then
        dieing=1
        tidy_pids
        if [[ -z $pids ]]; then
            log No pids to tidy
        else
            if [[ -n $post_kill || -n $pls_die ]]; then
                log Kill $pids
                [[ -n $pids ]] && kill $pids
            elif [[ -n $post_wait ]]; then
                log Wait $pids
                while (( count_running > 0 )); do
                    wait -n $pids; res=$?
                    [[ $res != 0 ]] && let error_count++
                    let count_running--
                done
            fi
        fi
    fi
    if [[ -n $pls_die ]]; then
        [[ $error_count != 0 ]] && die Errors: $error_count
        log die $(my_ps)
        exit 22
    fi
}

trap tidy_up INT

while [[ $# -gt 0 ]]; do
    arg=$1
    shift
    [[ $arg != "-c" && $arg != "--config" ]] && ensure_config
    case $arg in
        -h|--help)
            usage
            exit
            ;;
        --cmd)
            cmd=$1
            shift
            ;;
        --log)
            logfile=$1
            shift
            ;;
        -a|--max-errors)
            max_errors=$1
            shift
            ;;
        -c|--config)
            config=$1
            shift
            if [[ ! -r $config ]]; then
                die Cannot see config $config
            fi
            seen_config=
            ensure_config
            ;;
        -p|--parallel)
            max_running=$1
            shift
            ;;
        -m|--max-start*)
            max_starts=$1
            shift
            ;;
        -K|--no-kill)
            post_kill=
            ;;
        -w|--wait)
            post_wait=1
            post_kill=
            ;;
        *)
            die Unknown argument: $arg
            ;;
    esac
done
ensure_config

[[ -z $cmd ]]     && die Missing --log argument
[[ -z $logfile ]] && die Missing --cmd argument

count_running=0
run_seq=0
error_count=0
pids=
while (( max_starts == 0 || run_seq < max_starts )); do
    while (( count_running >= max_running )); do
        res=127
        while [[ $res == 127 ]]; do
            wait -n $pids
            res=$?
            if [[ $res == 127 ]]; then
                log none ready $pids; sleep 0.2
            else
                let count_running--
            fi
        done
        [[ $res != 0 ]] && let error_count++

        if (( error_count >= max_errors )); then
            log "FATAL Aborting after $error_count errors (running: $count_running): $res"
            break 2
        fi
    done

    let nary='run_seq%max_running'
    my_logfile=${logfile//_SEQ_/$run_seq};my_logfile=${my_logfile//_NARY_/$nary}
    my_command=${cmd//_SEQ_/$run_seq};    my_command=${my_command//_NARY_/$nary}
    nohup $my_command >> $my_logfile 2>&1 &
    pids="$pids${pids:+ }$!"
    # sleep 0.1
    let count_running++
    let run_seq++
    log "$run_seq [$count_running] {err: $error_count} <res=$res> nohup $my_command >> $my_logfile"
    tidy_pids
done

[[ -n $post_wait || -n $post_kill ]] && tidy_up non-fatal

if [[ $error_count -gt 0 ]]; then
    die "$error_count errors"
fi
log "done"
