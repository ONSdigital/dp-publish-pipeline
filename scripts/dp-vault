#!/bin/bash

scriptDirectory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
shell=
export VAULT_ADDR=${VAULT_ADDR:-http://127.0.0.1:8200}

function usage {
    echo "-i, --init                      : Configure vault with policies and to enable settings"
    echo "-a, --add <name> <policies,...> : Add approle account"
    echo "-t, --token <approle>           : Generate a token for an approle"
    echo "-s, --shell                     : Turn on shell-command output (e.g. for -t ...)"
    echo "--------------------"
    echo "policies : token_renew zebedee_read zebedee_write"
}


function init {
    vault auth-enable approle
    vault policy-write token_renew $scriptDirectory"/token_renew_policy.hcl"
    vault policy-write zebedee_read $scriptDirectory"/zebedee_read_policy.hcl"
    vault policy-write zebedee_write $scriptDirectory"/zebedee_write_policy.hcl"
    addAccount zebedee-cms token_renew,zebedee_write
    addAccount scheduler token_renew,zebedee_read
}

function addAccount {
    # To create periodic tokens you must set period to the max time before a token
    # is revoked. If a service renews the token, the time is reset back to the time
    # set in the period.
    vault write -f auth/approle/role/$1 display_name=$1 policies=$2 period=10m \
          secret_id_ttl=10m token_num_uses=0 token_ttl=10m secret_id_num_uses=0
}


function accountInfo {
    roleId=$(vault read -format=json auth/approle/role/$1/role-id | jq -r .data.role_id)
    secret=$(vault write -format=json -f auth/approle/role/$1/secret-id | jq -r .data.secret_id)
    token=$(vault write -format=json auth/approle/login role_id=$roleId secret_id=$secret | jq -r .auth.client_token)

    if [[ -z $shell ]]; then
        echo "$1"
        echo "Token    : " $token
    else
        echo "# $1"
        echo "export VAULT_TOKEN='$token'"
    fi
}

while [[ -n $1 ]]; do
    arg=$1; shift
    if   [[ $arg == -i || $arg == --init  ]]; then init
    elif [[ $arg == -s || $arg == --shell ]]; then shell=1
    elif [[ $arg == -a || $arg == --add   ]]; then addAccount $1 $2; shift 2
    elif [[ $arg == -t || $arg == --token ]]; then accountInfo $1; shift
    elif [[ $arg == -h || $arg == --help  ]]; then usage
    else
        echo "Bad argument: $arg" >&2
        usage >&2
        exit 2
    fi
done
